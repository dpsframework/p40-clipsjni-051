#ifndef _CONSTRUCT_COMPILER_HEADER_
#define _CONSTRUCT_COMPILER_HEADER_

#include <stdio.h>
#include "setup.h"
#include "expressn.h"
#include "extnfunc.h"
#include "clips.h"

#define VS (void *)


/************************************/
/* EXTERNAL FUNCTION DEFINITIONS    */
/************************************/

extern void *SetCurrentModuleCommand(void *);
extern void *GetCurrentModuleCommand(void *);
extern void PPDefmoduleCommand(void *);
extern void ListDefmodulesCommand(void *);
extern void EnvGetDefmoduleList(void *,DATA_OBJECT_PTR_ARG);
extern void ObjectMatchDelay(void *,DATA_OBJECT_PTR_ARG);
extern void DelayedQueryDoForAllInstances(void *,DATA_OBJECT_PTR_ARG);
extern void QueryDoForAllInstances(void *,DATA_OBJECT_PTR_ARG);
extern void QueryDoForInstance(void *,DATA_OBJECT_PTR_ARG);
extern void QueryFindAllInstances(void *,DATA_OBJECT_PTR_ARG);
extern void QueryFindInstance(void *,DATA_OBJECT_PTR_ARG);
extern int AnyInstances(void *);
extern void GetQueryInstanceSlot(void *,DATA_OBJECT_PTR_ARG);
extern void *GetQueryInstance(void *);
extern void *GetDefinstancesModuleCommand(void *);
extern void GetDefinstancesListFunction(void *,DATA_OBJECT_PTR_ARG);
extern void ListDefinstancesCommand(void *);
extern void PPDefinstancesCommand(void *);
extern void UndefinstancesCommand(void *);
extern void DynamicHandlerPutSlot(void *,DATA_OBJECT_PTR_ARG);
extern void DynamicHandlerGetSlot(void *,DATA_OBJECT_PTR_ARG);
extern void DynamicHandlerPutSlot(void *,DATA_OBJECT_PTR_ARG);
extern void DynamicHandlerGetSlot(void *,DATA_OBJECT_PTR_ARG);
extern void CallNextHandler(void *,DATA_OBJECT_PTR_ARG);
extern void CallNextHandler(void *,DATA_OBJECT_PTR_ARG);
extern int NextHandlerAvailable(void *);
extern void ListDefmessageHandlersCommand(void *);
extern void PPDefmessageHandlerCommand(void *);
extern void PreviewSendCommand(void *);
extern void SendCommand(void *,DATA_OBJECT_PTR_ARG);
extern void UndefmessageHandlerCommand(void *);
extern long BinaryLoadInstancesCommand(void *);
extern long BinarySaveInstancesCommand(void *);
extern long RestoreInstancesCommand(void *);
extern long LoadInstancesCommand(void *);
extern long SaveInstancesCommand(void *);
extern void MVSlotDeleteCommand(void *,DATA_OBJECT_PTR_ARG);
extern void MVSlotInsertCommand(void *,DATA_OBJECT_PTR_ARG);
extern void MVSlotReplaceCommand(void *,DATA_OBJECT_PTR_ARG);
extern int DirectMVDeleteCommand(void *);
extern int DirectMVInsertCommand(void *);
extern int DirectMVReplaceCommand(void *);
extern void MVSlotDeleteCommand(void *,DATA_OBJECT_PTR_ARG);
extern void MVSlotInsertCommand(void *,DATA_OBJECT_PTR_ARG);
extern void MVSlotReplaceCommand(void *,DATA_OBJECT_PTR_ARG);
extern int DirectMVDeleteCommand(void *);
extern int DirectMVInsertCommand(void *);
extern int DirectMVReplaceCommand(void *);
extern void MsgDuplicateMsgHandler(void *,DATA_OBJECT_PTR_ARG);
extern void DirectDuplicateMsgHandler(void *,DATA_OBJECT_PTR_ARG);
extern void MsgModifyMsgHandler(void *,DATA_OBJECT_PTR_ARG);
extern void DirectModifyMsgHandler(void *,DATA_OBJECT_PTR_ARG);
extern void MsgDuplicateInstance(void *,DATA_OBJECT_PTR_ARG);
extern void InactiveMsgDuplicateInstance(void *,DATA_OBJECT_PTR_ARG);
extern void DuplicateInstance(void *,DATA_OBJECT_PTR_ARG);
extern void InactiveDuplicateInstance(void *,DATA_OBJECT_PTR_ARG);
extern void MsgModifyInstance(void *,DATA_OBJECT_PTR_ARG);
extern void InactiveMsgModifyInstance(void *,DATA_OBJECT_PTR_ARG);
extern void ModifyInstance(void *,DATA_OBJECT_PTR_ARG);
extern void InactiveModifyInstance(void *,DATA_OBJECT_PTR_ARG);
extern void ClassCommand(void *,DATA_OBJECT_PTR_ARG);
extern int InstanceExistPCommand(void *);
extern int InstancePCommand(void *);
extern void InstanceNameCommand(void *,DATA_OBJECT_PTR_ARG);
extern int InstanceNamePCommand(void *);
extern int InstanceAddressPCommand(void *);
extern void InstanceAddressCommand(void *,DATA_OBJECT_PTR_ARG);
extern void *InstanceNameToSymbol(void *);
extern void SymbolToInstanceName(void *,DATA_OBJECT_PTR_ARG);
extern void PPInstanceCommand(void *);
extern void InstancesCommand(void *);
extern int UnmakeInstanceCommand(void *);
extern int CreateInstanceHandler(void *);
extern int DeleteInstanceCommand(void *);
extern void InitSlotsCommand(void *,DATA_OBJECT_PTR_ARG);
extern void MakeInstanceCommand(void *,DATA_OBJECT_PTR_ARG);
extern void InactiveMakeInstance(void *,DATA_OBJECT_PTR_ARG);
extern void InitializeInstanceCommand(void *,DATA_OBJECT_PTR_ARG);
extern void InactiveInitializeInstance(void *,DATA_OBJECT_PTR_ARG);
extern void *SetClassDefaultsModeCommand(void *);
extern void *GetClassDefaultsModeCommand(void *);
extern void *GetDefclassModuleCommand(void *);
extern void SlotDefaultValueCommand(void *,DATA_OBJECT_PTR_ARG);
extern int SlotDirectAccessPCommand(void *);
extern int SlotPublicPCommand(void *);
extern int SlotInitablePCommand(void *);
extern int SlotWritablePCommand(void *);
extern void SlotCardinalityCommand(void *,DATA_OBJECT_PTR_ARG);
extern void SlotRangeCommand(void *,DATA_OBJECT_PTR_ARG);
extern void SlotAllowedClassesCommand(void *,DATA_OBJECT_PTR_ARG);
extern void SlotAllowedValuesCommand(void *,DATA_OBJECT_PTR_ARG);
extern void SlotTypesCommand(void *,DATA_OBJECT_PTR_ARG);
extern void SlotSourcesCommand(void *,DATA_OBJECT_PTR_ARG);
extern void SlotFacetsCommand(void *,DATA_OBJECT_PTR_ARG);
extern int SlotExistPCommand(void *);
extern void GetDefmessageHandlersListCmd(void *,DATA_OBJECT_PTR_ARG);
extern void ClassSubclassesCommand(void *,DATA_OBJECT_PTR_ARG);
extern void ClassSuperclassesCommand(void *,DATA_OBJECT_PTR_ARG);
extern void ClassSlotsCommand(void *,DATA_OBJECT_PTR_ARG);
extern int ClassReactivePCommand(void *);
extern int ClassAbstractPCommand(void *);
extern int MessageHandlerExistPCommand(void *);
extern int ClassExistPCommand(void *);
extern int SubclassPCommand(void *);
extern int SuperclassPCommand(void *);
extern void GetDefclassListFunction(void *,DATA_OBJECT_PTR_ARG);
extern void BrowseClassesCommand(void *);
extern void DescribeClassCommand(void *);
extern void PPDefclassCommand(void *);
extern void ListDefclassesCommand(void *);
extern void UndefclassCommand(void *);
extern void DeftemplateSlotFacetValueFunction(void *,DATA_OBJECT_PTR_ARG);
extern int DeftemplateSlotFacetExistPFunction(void *);
extern void *DeftemplateSlotDefaultPFunction(void *);
extern int DeftemplateSlotExistPFunction(void *);
extern int DeftemplateSlotSinglePFunction(void *);
extern int DeftemplateSlotMultiPFunction(void *);
extern void DeftemplateSlotTypesFunction(void *,DATA_OBJECT_PTR_ARG);
extern void DeftemplateSlotRangeFunction(void *,DATA_OBJECT_PTR_ARG);
extern void DeftemplateSlotAllowedValuesFunction(void *,DATA_OBJECT_PTR_ARG);
extern void DeftemplateSlotCardinalityFunction(void *,DATA_OBJECT_PTR_ARG);
extern void DeftemplateSlotDefaultValueFunction(void *,DATA_OBJECT_PTR_ARG);
extern void DeftemplateSlotNamesFunction(void *,DATA_OBJECT_PTR_ARG);
extern void DuplicateCommand(void *,DATA_OBJECT_PTR_ARG);
extern void ModifyCommand(void *,DATA_OBJECT_PTR_ARG);
extern void PPDeftemplateCommand(void *);
extern void ListDeftemplatesCommand(void *);
extern void *DeftemplateModuleFunction(void *);
extern void UndeftemplateCommand(void *);
extern void GetDeftemplateListFunction(void *,DATA_OBJECT_PTR_ARG);
extern void DelayedQueryDoForAllFacts(void *,DATA_OBJECT_PTR_ARG);
extern void QueryDoForAllFacts(void *,DATA_OBJECT_PTR_ARG);
extern void QueryDoForFact(void *,DATA_OBJECT_PTR_ARG);
extern void QueryFindAllFacts(void *,DATA_OBJECT_PTR_ARG);
extern void QueryFindFact(void *,DATA_OBJECT_PTR_ARG);
extern int AnyFacts(void *);
extern void GetQueryFactSlot(void *,DATA_OBJECT_PTR_ARG);
extern void GetQueryFact(void *,DATA_OBJECT_PTR_ARG);
extern void PPFactFunction(void *);
extern void GetFactListFunction(void *,DATA_OBJECT_PTR_ARG);
extern void FactSlotNamesFunction(void *,DATA_OBJECT_PTR_ARG);
extern void FactSlotValueFunction(void *,DATA_OBJECT_PTR_ARG);
extern void *FactRelationFunction(void *);
extern int FactExistpFunction(void *);
extern long long FactIndexFunction(void *);
extern int LoadFactsCommand(void *);
extern int SaveFactsCommand(void *);
extern int SetFactDuplicationCommand(void *);
extern int GetFactDuplicationCommand(void *);
extern void AssertStringFunction(void *,DATA_OBJECT_PTR_ARG);
extern void AssertStringFunction(void *,DATA_OBJECT_PTR_ARG);
extern void RetractCommand(void *);
extern void AssertCommand(void *,DATA_OBJECT_PTR_ARG);
extern void FactsCommand(void *);
extern void ShowDefglobalsCommand(void *);
extern int GetResetGlobalsCommand(void *);
extern int SetResetGlobalsCommand(void *);
extern void PPDefglobalCommand(void *);
extern void ListDefglobalsCommand(void *);
extern void *DefglobalModuleFunction(void *);
extern void UndefglobalCommand(void *);
extern void GetDefglobalListFunction(void *,DATA_OBJECT_PTR_ARG);
extern void *GetDeffunctionModuleCommand(void *);
extern void GetDeffunctionListFunction(void *,DATA_OBJECT_PTR_ARG);
extern void PPDeffunctionCommand(void *);
extern void ListDeffunctionsCommand(void *);
extern void UndeffunctionCommand(void *);
extern void ClassCommand(void *,DATA_OBJECT_PTR_ARG);
extern void *GetDefgenericModuleCommand(void *);
extern void GetMethodRestrictionsCommand(void *,DATA_OBJECT_PTR_ARG);
extern void GetDefmethodListCommand(void *,DATA_OBJECT_PTR_ARG);
extern void GetDefgenericListFunction(void *,DATA_OBJECT_PTR_ARG);
extern void PreviewGeneric(void *);
extern void ListDefmethodsCommand(void *);
extern void PPDefmethodCommand(void *);
extern void ListDefgenericsCommand(void *);
extern void PPDefgenericCommand(void *);
extern void GetGenericCurrentArgument(void *,DATA_OBJECT_PTR_ARG);
extern int NextMethodP(void *);
extern void OverrideNextMethod(void *,DATA_OBJECT_PTR_ARG);
extern void CallSpecificMethod(void *,DATA_OBJECT_PTR_ARG);
extern void CallNextMethod(void *,DATA_OBJECT_PTR_ARG);
extern void UndefmethodCommand(void *);
extern void UndefgenericCommand(void *);
extern void PPDeffactsCommand(void *);
extern void ListDeffactsCommand(void *);
extern void *DeffactsModuleFunction(void *);
extern void UndeffactsCommand(void *);
extern void GetDeffactsListFunction(void *,DATA_OBJECT_PTR_ARG);
extern void *SetStrategyCommand(void *);
extern void *GetStrategyCommand(void *);
extern int SetBetaMemoryResizingCommand(void *);
extern int GetBetaMemoryResizingCommand(void *);
extern int SetIncrementalResetCommand(void *);
extern int GetIncrementalResetCommand(void *);
extern long long TimetagFunction(void *);
extern void DependentsCommand(void *);
extern void DependenciesCommand(void *);
extern void ListFocusStackCommand(void *);
extern void JoinActivityResetCommand(void *);
extern void JoinActivityCommand(void *,DATA_OBJECT_PTR_ARG);
extern void MatchesCommand(void *,DATA_OBJECT_PTR_ARG);
extern void ShowBreaksCommand(void *);
extern void RemoveBreakCommand(void *);
extern void SetBreakCommand(void *);
extern void *GetFocusFunction(void *);
extern void *PopFocusFunction(void *);
extern void GetFocusStackFunction(void *,DATA_OBJECT_PTR_ARG);
extern void ClearFocusStackCommand(void *);
extern int FocusCommand(void *);
extern void HaltCommand(void *);
extern void RunCommand(void *);
extern void PPDefruleCommand(void *);
extern void ListDefrulesCommand(void *);
extern void ListDefrulesCommand(void *);
extern void *DefruleModuleFunction(void *);
extern void UndefruleCommand(void *);
extern void GetDefruleListFunction(void *,DATA_OBJECT_PTR_ARG);
extern void AgendaCommand(void *);
extern void *SetSalienceEvaluationCommand(void *);
extern void *GetSalienceEvaluationCommand(void *);
extern void RefreshAgendaCommand(void *);
extern void RefreshCommand(void *);
extern void ResetCommand(void *);
extern void ClearCommand(void *);
extern int SSCCommand(void *);
extern int GSCCommand(void *);
extern int SDCCommand(void *);
extern int GDCCommand(void *);
extern void CheckSyntaxFunction(void *,DATA_OBJECT_PTR_ARG);
extern double GetProfilePercentThresholdCommand(void *);
extern double SetProfilePercentThresholdCommand(void *);
extern void ProfileResetCommand(void *);
extern void ProfileInfoCommand(void *);
extern void ProfileCommand(void *);
extern void ConstructsToCCommand(void *);
extern void *GetRegionCommand(void *);
extern int PrintRegionCommand(void *);
extern int TossCommand(void *);
extern void FetchCommand(void *,DATA_OBJECT_PTR_ARG);
extern long long RoundFunction(void *);
extern double PowFunction(void *);
extern double GradDegFunction(void *);
extern double DegGradFunction(void *);
extern double RadDegFunction(void *);
extern double DegRadFunction(void *);
extern double PiFunction(void *);
extern double SqrtFunction(void *);
extern double Log10Function(void *);
extern double LogFunction(void *);
extern double ExpFunction(void *);
extern void ModFunction(void *,DATA_OBJECT_PTR_ARG);
extern double AcothFunction(void *);
extern double AcschFunction(void *);
extern double AsechFunction(void *);
extern double AtanhFunction(void *);
extern double AsinhFunction(void *);
extern double AcoshFunction(void *);
extern double CothFunction(void *);
extern double CschFunction(void *);
extern double SechFunction(void *);
extern double TanhFunction(void *);
extern double SinhFunction(void *);
extern double CoshFunction(void *);
extern double AcotFunction(void *);
extern double AcscFunction(void *);
extern double AsecFunction(void *);
extern double AtanFunction(void *);
extern double AsinFunction(void *);
extern double AcosFunction(void *);
extern double CotFunction(void *);
extern double CscFunction(void *);
extern double SecFunction(void *);
extern double TanFunction(void *);
extern double SinFunction(void *);
extern double CosFunction(void *);
extern void StringToFieldFunction(void *,DATA_OBJECT_PTR_ARG);
extern int BuildFunction(void *);
extern void EvalFunction(void *,DATA_OBJECT_PTR_ARG);
extern void StrIndexFunction(void *,DATA_OBJECT_PTR_ARG);
extern void *SubStringFunction(void *);
extern void LowcaseFunction(void *,DATA_OBJECT_PTR_ARG);
extern void UpcaseFunction(void *,DATA_OBJECT_PTR_ARG);
extern long long StrCompareFunction(void *);
extern long long StrLengthFunction(void *);
extern void SymCatFunction(void *,DATA_OBJECT_PTR_ARG);
extern void StrCatFunction(void *,DATA_OBJECT_PTR_ARG);
extern long GetMvPrognIndex(void *);
extern void GetMvPrognField(void *,DATA_OBJECT_PTR_ARG);
extern void MVDeleteFunction(void *,DATA_OBJECT_PTR_ARG);
extern void MVSubseqFunction(void *,DATA_OBJECT_PTR_ARG);
extern void MemberFunction(void *,DATA_OBJECT_PTR_ARG);
extern void MVReplaceFunction(void *,DATA_OBJECT_PTR_ARG);
extern void NthFunction(void *,DATA_OBJECT_PTR_ARG);
extern int SubsetpFunction(void *);
extern void ExplodeFunction(void *,DATA_OBJECT_PTR_ARG);
extern void *ImplodeFunction(void *);
extern void ForeachFunction(void *,DATA_OBJECT_PTR_ARG);
extern void MultifieldPrognFunction(void *,DATA_OBJECT_PTR_ARG);
extern int SubsetpFunction(void *);
extern void MemberFunction(void *,DATA_OBJECT_PTR_ARG);
extern void NthFunction(void *,DATA_OBJECT_PTR_ARG);
extern void *ImplodeFunction(void *);
extern void ExplodeFunction(void *,DATA_OBJECT_PTR_ARG);
extern void InsertFunction(void *,DATA_OBJECT_PTR_ARG);
extern void ReplaceFunction(void *,DATA_OBJECT_PTR_ARG);
extern void DeleteFunction(void *,DATA_OBJECT_PTR_ARG);
extern void ReplaceMemberFunction(void *,DATA_OBJECT_PTR_ARG);
extern void DeleteMemberFunction(void *,DATA_OBJECT_PTR_ARG);
extern void SubseqFunction(void *,DATA_OBJECT_PTR_ARG);
extern void RestFunction(void *,DATA_OBJECT_PTR_ARG);
extern void FirstFunction(void *,DATA_OBJECT_PTR_ARG);
extern void ListWatchItemsCommand(void *);
extern int GetWatchItemCommand(void *);
extern void UnwatchCommand(void *);
extern void WatchCommand(void *);
extern void SortFunction(void *,DATA_OBJECT_PTR_ARG);
extern int BloadCommand(void *);
extern int BsaveCommand(void *);
extern int LoadStarCommand(void *);
extern int LoadCommand(void *);
extern int SaveCommand(void *);
extern int DribbleOffCommand(void *);
extern int DribbleOnCommand(void *);
extern int BatchStarCommand(void *);
extern int BatchCommand(void *);
extern void MaxFunction(void *,DATA_OBJECT_PTR_ARG);
extern void MinFunction(void *,DATA_OBJECT_PTR_ARG);
extern void AbsFunction(void *,DATA_OBJECT_PTR_ARG);
extern double FloatFunction(void *);
extern long long IntegerFunction(void *);
extern int GetAutoFloatDividendCommand(void *);
extern int SetAutoFloatDividendCommand(void *);
extern long long DivFunction(void *);
extern void DivisionFunction(void *,DATA_OBJECT_PTR_ARG);
extern void SubtractionFunction(void *,DATA_OBJECT_PTR_ARG);
extern void MultiplicationFunction(void *,DATA_OBJECT_PTR_ARG);
extern void AdditionFunction(void *,DATA_OBJECT_PTR_ARG);
extern int PointerpFunction(void *);
extern int MultifieldpFunction(void *);
extern int MultifieldpFunction(void *);
extern int EvenpFunction(void *);
extern int OddpFunction(void *);
extern int FloatpFunction(void *);
extern int IntegerpFunction(void *);
extern int NumberpFunction(void *);
extern int LexemepFunction(void *);
extern int StringpFunction(void *);
extern int SymbolpFunction(void *);
extern int SymbolpFunction(void *);
extern int NumericNotEqualFunction(void *);
extern int NumericNotEqualFunction(void *);
extern int NumericEqualFunction(void *);
extern int GreaterThanFunction(void *);
extern int LessThanFunction(void *);
extern int GreaterThanOrEqualFunction(void *);
extern int LessThanOrEqualFunction(void *);
extern int NeqFunction(void *);
extern int EqFunction(void *);
extern int OrFunction(void *);
extern int AndFunction(void *);
extern int NotFunction(void *);
extern void ReadNumberFunction(void *,DATA_OBJECT_PTR_ARG);
extern void SetLocaleFunction(void *,DATA_OBJECT_PTR_ARG);
extern void ReadlineFunction(void *,DATA_OBJECT_PTR_ARG);
extern void *FormatFunction(void *);
extern int RenameFunction(void *);
extern int RemoveFunction(void *);
extern void PutCharFunction(void *);
extern int GetCharFunction(void *);
extern int CloseFunction(void *);
extern int OpenFunction(void *);
extern void ReadFunction(void *,DATA_OBJECT_PTR_ARG);
extern void PrintoutFunction(void *);
extern double TimerFunction(void *);
extern void CallFunction(void *,DATA_OBJECT_PTR_ARG);
extern void NewFunction(void *,DATA_OBJECT_PTR_ARG);
extern void FuncallFunction(void *,DATA_OBJECT_PTR_ARG);
extern void GetFunctionListFunction(void *,DATA_OBJECT_PTR_ARG);
extern void AproposCommand(void *);
extern void CreateFunction(void *,DATA_OBJECT_PTR_ARG);
extern void CreateFunction(void *,DATA_OBJECT_PTR_ARG);
extern void *GetFunctionRestrictions(void *);
extern int EnvGetSequenceOperatorRecognition(void *);
extern int SetSORCommand(void *);
extern void *CauseEvaluationError(void *);
extern void DummyExpandFuncMultifield(void *,DATA_OBJECT_PTR_ARG);
extern void ExpandFuncCall(void *,DATA_OBJECT_PTR_ARG);
extern void *OperatingSystemFunction(void *);
extern void OptionsCommand(void *);
extern long long MemRequestsCommand(void *);
extern long long MemUsedCommand(void *);
extern long long ReleaseMemCommand(void *);
extern void ConserveMemCommand(void *);
extern void SeedFunction(void *);
extern long long RandomFunction(void *);
extern void GMTimeFunction(void *,DATA_OBJECT_PTR_ARG);
extern void LocalTimeFunction(void *,DATA_OBJECT_PTR_ARG);
extern double TimeFunction(void *);
extern long long LengthFunction(void *);
extern long long LengthFunction(void *);
extern void gensystem(void *);
extern long long SetgenFunction(void *);
extern void *GensymStarFunction(void *);
extern void *GensymFunction(void *);
extern void SwitchFunction(void *,DATA_OBJECT_PTR_ARG);
extern void BreakFunction(void *);
extern void ReturnFunction(void *,DATA_OBJECT_PTR_ARG);
extern void PrognFunction(void *,DATA_OBJECT_PTR_ARG);
extern void BindFunction(void *,DATA_OBJECT_PTR_ARG);
extern long long GetLoopCount(void *);
extern void LoopForCountFunction(void *,DATA_OBJECT_PTR_ARG);
extern void WhileFunction(void *,DATA_OBJECT_PTR_ARG);
extern void IfFunction(void *,DATA_OBJECT_PTR_ARG);
extern void ExitCommand(void *);

#endif

/****************************/
/* EXTERN ARRAY DEFINITIONS */
/****************************/

extern struct symbolHashNode *sht1[];
extern struct floatHashNode *fht1[];
extern struct integerHashNode *iht1[];
extern struct bitMapHashNode *bmht1[];
extern struct symbolHashNode S1_1[];
extern struct integerHashNode I1_1[];
extern struct bitMapHashNode B1_1[];
extern unsigned long L1_1[];
extern struct FunctionDefinition P1_1[];
extern struct expr E1_1[];
#include "moduldef.h"
extern struct defmoduleItemHeader *T_1_1[];
extern struct defmodule U_1_1[];
#include "classcom.h"
#include "classini.h"
extern DEFCLASS * O_1_1[];
extern unsigned P_1;
extern DEFCLASS * N_1_1[];
extern SLOT_NAME * M_1_1[];
extern SLOT_NAME L_1_1[];
extern DEFCLASS_MODULE D_1_1[];
extern DEFCLASS E_1_1[];
extern DEFCLASS * F_1_1[];
extern HANDLER J_1_1[];
extern unsigned K_1_1[];
extern SLOT_DESC G_1_1[];
extern SLOT_DESC * H_1_1[];
extern unsigned I_1_1[];
#include "defins.h"
extern DEFINSTANCES_MODULE B_1_1[];
extern DEFINSTANCES C_1_1[];
#include "tmpltdef.h"
extern struct deftemplateModule Y1_1[];
extern struct deftemplate Z1_1[];
#include "factbld.h"
#include "globldef.h"
extern struct defglobalModule V1_1[];
#include "dffnxfun.h"
extern DEFFUNCTION_MODULE T1_1[];
#include "genrcfun.h"
extern DEFGENERIC_MODULE M1_1[];
#include "dffctdef.h"
extern struct deffactsModule J1_1[];
extern struct deffacts K1_1[];
#include "ruledef.h"
extern struct defruleModule A1_1[];
   void *InitCImage_1(void);
   void FixupCImage_1(void *);
